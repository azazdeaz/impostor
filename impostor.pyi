from typing import Dict, Tuple

class World:
    name: str
    models: Dict[str, 'Model']
    def __init__(self, name: str) -> None: ...
    def add_model(self, model: 'Model') -> 'World': ...
    def __repr__(self) -> str: ...

class Model:
    name: str
    links: Dict[str, 'Link']
    def __init__(self, name: str) -> None: ...
    def add_link(self, link: 'Link') -> 'Model': ...
    def __repr__(self) -> str: ...

class Link:
    name: str
    visuals: list['Geometry']
    def __init__(self, name: str) -> None: ...
    def add_visual(self, visual: 'Geometry') -> 'Link': ...
    def __repr__(self) -> str: ...

class Geometry:
    color: Tuple[float, float, float]
    @staticmethod
    def new_box(x: float, y: float, z: float) -> 'Geometry': ...
    @staticmethod
    def new_sphere(radius: float) -> 'Geometry': ...
    @staticmethod
    def new_cylinder(radius: float, length: float) -> 'Geometry': ...
    @staticmethod
    def new_mesh(path: str) -> 'Geometry': ...
    def set_color(self, r: float, g: float, b: float) -> 'Geometry': ...
    def __repr__(self) -> str: ...
